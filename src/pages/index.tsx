import { useState, useEffect, useMemo } from 'react';\nimport { GetServerSideProps } from 'next';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { PromptData } from '@/types';\nimport { loadPromptData, getAllCategories } from '@/lib/data';\nimport { initializeSearch, searchPrompts, filterPrompts } from '@/lib/search';\nimport { Header } from '@/components/Header';\nimport { SearchFilters } from '@/components/SearchFilters';\nimport { PromptCard } from '@/components/PromptCard';\n\ninterface HomeProps {\n  prompts: PromptData[];\n  categories: string[];\n}\n\nexport default function Home({ prompts, categories }: HomeProps) {\n  const router = useRouter();\n  const isEn = router.locale === 'en';\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState<'id' | 'title' | 'model'>('id');\n\n  useEffect(() => {\n    initializeSearch(prompts);\n  }, [prompts]);\n\n  const filteredPrompts = useMemo(() => {\n    let results = searchTerm ? searchPrompts(searchTerm) : prompts;\n    return filterPrompts(results, {\n      categories: selectedCategories.length > 0 ? selectedCategories : undefined,\n      sortBy,\n    });\n  }, [prompts, searchTerm, selectedCategories, sortBy]);\n\n  const handleCategoryToggle = (category: string) => {\n    setSelectedCategories(prev => \n      prev.includes(category)\n        ? prev.filter(c => c !== category)\n        : [...prev, category]\n    );\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{isEn ? 'AI Photo Prompts' : 'AI 照片提示'}</title>\n        <meta name=\"description\" content={isEn ? 'Professional photography prompts for AI image generation' : '专业的 AI 图像生成摄影提示词'} />\n      </Head>\n\n      <div className=\"min-h-screen bg-gray-100\">\n        <Header />\n        \n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              {isEn ? 'AI Photo Prompts' : 'AI 照片提示'}\n            </h1>\n            <p className=\"text-gray-600\">\n              {isEn \n                ? 'Discover professional photography prompts for AI image generation'\n                : '发现专业的 AI 图像生成摄影提示词'\n              }\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-1\">\n              <SearchFilters\n                searchTerm={searchTerm}\n                onSearchChange={setSearchTerm}\n                categories={categories}\n                selectedCategories={selectedCategories}\n                onCategoryToggle={handleCategoryToggle}\n                sortBy={sortBy}\n                onSortChange={setSortBy}\n              />\n            </div>\n            \n            <div className=\"lg:col-span-3\">\n              <div className=\"mb-4 flex justify-between items-center\">\n                <p className=\"text-gray-600\">\n                  {isEn \n                    ? `${filteredPrompts.length} prompts found`\n                    : `找到 ${filteredPrompts.length} 个提示词`\n                  }\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {filteredPrompts.map((prompt) => (\n                  <PromptCard key={prompt.id} prompt={prompt} />\n                ))}\n              </div>\n              \n              {filteredPrompts.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-gray-500\">\n                    {isEn \n                      ? 'No prompts found. Try adjusting your search or filters.'\n                      : '未找到提示词。请尝试调整搜索或筛选条件。'\n                    }\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  try {\n    const prompts = await loadPromptData();\n    const categories = getAllCategories(prompts);\n    \n    return {\n      props: {\n        prompts,\n        categories,\n      },\n    };\n  } catch (error) {\n    console.error('Error loading prompt data:', error);\n    return {\n      props: {\n        prompts: [],\n        categories: [],\n      },\n    };\n  }\n};"